<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>开心博客</title>
  <subtitle>不停止的脚步,不服输的心!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-13T11:57:40.738Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘欢欢</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于NodeJS</title>
    <link href="http://yoursite.com/2016/05/13/%E5%85%B3%E4%BA%8ENodeJS/"/>
    <id>http://yoursite.com/2016/05/13/关于NodeJS/</id>
    <published>2016-05-13T11:52:26.000Z</published>
    <updated>2017-03-13T11:57:40.738Z</updated>
    
    <content type="html"><![CDATA[<p>学习资源推荐</p>
<pre><code>网站:国内NodeJS开发者社区：https://cnodejs.org/

书籍:《深入浅出Node.js》：作者：阿里巴巴.朴灵

阿里开源论坛:http://code.taobao.org/

360下面的:https://75team.com/

http://stackoverflow.com/ 全世界最牛的程序员问
答网站
</code></pre><hr>
<p>NodeJS 服务器搭建(NodeJS的软件安装)</p>
<pre><code>安装步骤:
  见 其它资料 &gt; node.msi安装Node截图

NodeJS服务器的搭建,就类似于我们安装Apache服务器

如何判断有没有安装成功:
  在cmd终端中输入 node -v 看有没有提示,如果有提示就说明
  安装成功了,如果没有,还需要做下一步

mac:https://brew.sh/index_zh-cn.html

使用nvm安装多个node版本并且进行切换:
  http://www.jianshu.com/p/07c3456e875a
</code></pre><hr>
<p>系统环境变量的配置</p>
<pre><code>目的:
  为了能在终端的任何一个目录下 启动 Node.exe,来执行我们的
  NodeJS的代码

环境变量有些类似于我们的桌面快捷方式

配置步骤:
  可以参考 其它资料 &gt; 环境变量设置(以QQ为例) 来配置
  Node.exe的环境变量,方便在终端的任何目录下启动Node.exe
  (REPL执行环境),来执行我们的NodeJS代码
</code></pre><hr>
<p>REPL执行环境的解释</p>
<pre><code>它就是我们NodeJS代码的运行环境



前提:
  我们的NodeJS的代码不是运行在浏览器中的,那他运行在哪里呢?

基本概念:
  1.REPL就是Node.exe 启动起来之后的运行环境

  2.REPL 可以理解成类似于`启动起来的`Apache服务器

  3.Node.exe(REPL)环境启动之后,就会执行放入它里面的
  NodeJS代码了,类似于启动Apache服务器之后就可以运行放入它
  里面的php代码了

  4.js代码放入到node.exe中就可以执行了

运行起来的 node.exe == REPL执行环境
</code></pre><hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习资源推荐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;网站:国内NodeJS开发者社区：https://cnodejs.org/

书籍:《深入浅出Node.js》：作者：阿里巴巴.朴灵

阿里开源论坛:http://code.taobao.org/

360下面的:https://
    
    </summary>
    
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS的核心模块</title>
    <link href="http://yoursite.com/2016/04/13/nodeJS%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2016/04/13/nodeJS的核心模块/</id>
    <published>2016-04-13T12:15:40.000Z</published>
    <updated>2017-03-13T12:18:38.711Z</updated>
    
    <content type="html"><![CDATA[<p>Node核心模块之HTTP模块</p>
<pre><code>作用:
  处理客户端的网络请求

代码步骤:
  1.导入 HTTP 核心模块
  2.监听客户端的请求
  3.处理客户端的请求
  4.开启服务器
</code></pre><hr>
<p>Node核心模块之URL模块</p>
<pre><code>作用:
  处理客户端请求过来的URL

代码步骤:
  1.导入 URL 核心模块
  2.导入 HTTP 核心模块
  3.监听客户端的请求
  在这中间处理客户端请求过来的URL
  4.处理客户端的请求
  5.开启服务器   
</code></pre><hr>
<p>NodeJS核心模块之Query Strings模块</p>
<pre><code>作用:处理客户端通过`get/post`请求传递过来的参数

使用关键点:
  1.需要导入 &apos;querystring&apos; 这个核心模块
  2.`get`请求时 querystring 一般是配合 url 核心模块一起使用的
  3.`get/post`请求最终都需要调用 querystring.parse方法,
  将请求传递过来的键值对字符串转成js对象,方便操作

注意:
  get/post的请求方式是不一样的,客户端传递过来时,参数放在
  的地方是不一样的,所以服务器端处理方式也不太一样
</code></pre><hr>
<p>NodeJS核心模块之File System模块</p>
<pre><code>前提:以后的所有静态资源(html,css,js,图片等)都是放在服务端
的,如果浏览器需要这些html,css,js,图片等资源,则需要先将其读
取到node.exe的内容中,然后再返回给浏览器

作用:
  在服务端来操作文件,可能是需要将浏览器上传的图片保存到服
  务器,也可能是需要将服务器的资源读取之后返回给浏览器

代码步骤:
  1.导入 fs 核心模块
  2.使用相应的方法来写入文件、读取文件等操作

注意点:
  目录 fs它是不会自动帮我们创建的需要我们自己手工创建
  文件如果不存在,调用writeFile与appendFile方法会自动帮
  我们创建
</code></pre><hr>
<p>NodeJS核心模块之Path模块</p>
<pre><code>作用:操作文件的路径,为文件操作服务

常用的几个函数:
  path.join(第一个路径,第二个路径) : 拼接路径
</code></pre><hr>
<p>NodeJS核心模块之Global模块</p>
<pre><code>作用:全局共享的,不需要导入模块即可以使用

常用的属性:
  __dirname : 文件所在的文件夹路径
  __filename : 文件所在的路径
  require() : 导入需要的模块
  module : 自定义模块时用到
  exports : 自定义模块时用到
</code></pre><hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node核心模块之HTTP模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;作用:
  处理客户端的网络请求

代码步骤:
  1.导入 HTTP 核心模块
  2.监听客户端的请求
  3.处理客户端的请求
  4.开启服务器
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;Node核心模块
    
    </summary>
    
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>webpack构建项目</title>
    <link href="http://yoursite.com/2016/03/24/webpack%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2016/03/24/webpack构建项目/</id>
    <published>2016-03-24T12:06:15.000Z</published>
    <updated>2017-03-24T12:08:45.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>  概念:<br>    webpack就是一个资源打包工具,它可以将css,js,image,.vue等等文件当做一个模块来进行打包处理,最终将这些资源输出到一个统一的.js文件中,将来在系统中只需要请求这个打包好的.js文件即可完成所有的功能！</p>
<p>  为什么要选择webpack<br>    1.vuejs官方脚手架工具中就使用了webpack模版<br>    2.对所有的资源会做压缩等优化<br>    3.它在开发过程中提供了一整套完整的功能,能够使我们开发过程变得高效</p>
<hr>
<h1 id="webpack的使用"><a href="#webpack的使用" class="headerlink" title="webpack的使用"></a>webpack的使用</h1><p>  使用途径:</p>
<pre><code>官方文档

1.x版本,项目中使用的是1.13.3这个版本
  http://webpack.github.io/docs/

2.x版本
  https://webpack.js.org/

https://github.com/webpack/webpack
</code></pre><p>  学习文章:<br>    <a href="http://www.w2bc.com/Article/50764" target="_blank" rel="external">http://www.w2bc.com/Article/50764</a><br>    <a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">http://www.jianshu.com/p/42e11515c10f</a></p>
<p>  使用步骤:<br>    1.安装webpack这个全局包 npm install webpack -g<br>    2.在cmd控制面板中调用webpack的指令给定两个参数 要打包的文件 要输出的文件路径 例如:webpack main.js build.js</p>
<hr>
<h1 id="webpack的基本概念"><a href="#webpack的基本概念" class="headerlink" title="webpack的基本概念"></a>webpack的基本概念</h1><p>  什么是webpack?<br>    Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p>
<p>  Github地址:<br>    <a href="https://github.com/webpack/webpack" target="_blank" rel="external">https://github.com/webpack/webpack</a></p>
<p>  官网:<br>    <a href="https://webpack.js.org/" target="_blank" rel="external">https://webpack.js.org/</a></p>
<p>  能做什么?<br>    打包及优化我们的代码,还能做到按需加载</p>
<p>  相比于其它构建工具/打包工具,比如gulp好在哪里?<br>    <a href="http://webpackdoc.com/what-is-webpack.html" target="_blank" rel="external">http://webpackdoc.com/what-is-webpack.html</a></p>
<pre><code>1.代码拆分
2.Loader
3.智能解析
4.插件系统
5.快速运行
</code></pre><hr>
<h1 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h1><p>  npm install webpack -g</p>
<hr>
<h1 id="webpack中的Loader"><a href="#webpack中的Loader" class="headerlink" title="webpack中的Loader"></a>webpack中的Loader</h1><p>  作用:<br>    Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>
<hr>
<h1 id="webpack中的插件"><a href="#webpack中的插件" class="headerlink" title="webpack中的插件"></a>webpack中的插件</h1><p>  作用:<br>    插件可以完成更多 loader 不能完成的功能。</p>
<hr>
<h1 id="webpack中webpack-dev-server"><a href="#webpack中webpack-dev-server" class="headerlink" title="webpack中webpack-dev-server"></a>webpack中webpack-dev-server</h1><p>  作用:<br>    可以简化我们的webpack打包的操作,当我们的源代码更改后<br>    会自动打包,并且刷新页面,有点类似于nodemon</p>
<hr>
<h1 id="npm-amp-cmd控制面板-amp-cmd的指令"><a href="#npm-amp-cmd控制面板-amp-cmd的指令" class="headerlink" title="npm? &amp; cmd控制面板 &amp;cmd的指令"></a>npm? &amp; cmd控制面板 &amp;cmd的指令</h1><p>  npm:<br>    1.npmjs.com存储了很多nodejs第三方的功能包<br>    2.利用npm这个工具,可以将nodejs第三方包通过相关指令进行安装,例如 npm install webpack -g<br>    3.只要安装好了node.exe这个软件,就自动安装好了npm这个包</p>
<p>  如何查看npm<br>    在终端中输入 npm -v</p>
<hr>
<h1 id="webpack案例"><a href="#webpack案例" class="headerlink" title="webpack案例"></a>webpack案例</h1><p>  意义:<br>    明白模块化开发的思想(需要谁就导入谁)</p>
<p>  写法:<br>    var 模块 = require(‘xxx/xxx.js’);<br>    路径可以是相对路径也可以是绝对路径</p>
<p>  注意:<br>    我们通过require导入的模块,其实就是对应js文件中通过module.exports导出的东西</p>
<p>  步骤:<br>    1.先写好js代码<br>    2.利用webpack打包成浏览器可以解析的js代码,主要对main.js进行打包,这样main.js依赖的模块也会一并打包<br>    3.在网页中导入上一步中打包并且生成好的build.js,在浏览器中运行</p>
<p>  webpack打包指令:<br>    webpack 要打包的文件 输出的文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h1&gt;&lt;p&gt;  概念:&lt;br&gt;    webpack就是一个资源打包工具,它可以将css,js,image,.v
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>post/get请求的区别</title>
    <link href="http://yoursite.com/2015/05/13/post-get%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2015/05/13/post-get请求的区别/</id>
    <published>2015-05-13T12:10:56.000Z</published>
    <updated>2017-03-13T12:12:39.177Z</updated>
    
    <content type="html"><![CDATA[<p>GET/POST的知识总结</p>
<pre><code>相同点:
  1.发送网络请求
  2.可以给服务器传递参数

不同点:
  传参的方式不一样
    GET: 
      http://127.0.0.1/login?username=zhangsan&amp;password=123
      请求体中是没有内容的

    POST:
      http://127.0.0.1/login
      参数放在请求体 username=zhangsan&amp;password=123

  传参的长度
    GET:有限制 256KB
    POST:理论上没限制,但是每个服务器规定不一样 Apache 5M

  缓存方式
    GET:有缓存
    POST:没有,因为POST主要用来给服务器提交数据,而这些数据是动态变化的

  安全性方面
    GET:很不安全
    POST:相对安全

应用场景:
  1.GET 当单纯向服务器获取数据的时候,一般用GET,因为有缓存,效率高
  2.POST 一般用在提交数据给服务器
  3.根据公司后台人员给的API文档来
</code></pre><hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GET/POST的知识总结&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;相同点:
  1.发送网络请求
  2.可以给服务器传递参数

不同点:
  传参的方式不一样
    GET: 
      http://127.0.0.1/login?username=zhangsan&amp;amp
    
    </summary>
    
    
      <category term="post/get" scheme="http://yoursite.com/tags/post-get/"/>
    
  </entry>
  
  <entry>
    <title>angular 从入门到精通</title>
    <link href="http://yoursite.com/2015/04/24/angular-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>http://yoursite.com/2015/04/24/angular-从入门到精通/</id>
    <published>2015-04-24T12:24:36.000Z</published>
    <updated>2017-03-24T12:27:36.772Z</updated>
    
    <content type="html"><![CDATA[<p>AngularJS 表达式</p>
<ul>
<li>AngularJS 表达式写在双大括号内：</li>
<li>AngularJS 表达式把数据绑定到 HTML，与 ng-bind 指令基本一致</li>
<li>AngularJS 将在表达式书写的位置”输出”数据<ul>
<li>数字</li>
<li>字符串</li>
<li>对象</li>
<li>数组</li>
</ul>
</li>
<li>AngularJS 表达式 很像 JavaScript 表达式：它们可以包含字符串、操作符和变量<ul>
<li>与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中</li>
<li>与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常</li>
<li>与 JavaScript 表达式不同，AngularJS 表达式支持过滤器</li>
</ul>
</li>
</ul>
<p>AngularJS 指令</p>
<p>AngularJS 指令是以 ng- 作为前缀的 HTML 属性，</p>
<p>AngularJS 通过内置的指令来为应用添加功能，</p>
<p>AngularJS 同时允许你自定义指令，从而构建更加超动感的 HTML。</p>
<p>HTML5 允许扩展的（自制的）属性，以 data- 开头。</p>
<p>AngularJS 属性以 ng- 开头，但是也可以使用 data-ng- 来让网页对 HTML5 有效。</p>
<ul>
<li>ng-app<ul>
<li>入口标识</li>
</ul>
</li>
<li>ng-init<ul>
<li>可以在模型仓库中初始化数据</li>
</ul>
</li>
<li>ng-model<ul>
<li>可以和表单控件的 value 进行双向绑定</li>
</ul>
</li>
<li>ng-bind<ul>
<li>和表达式一样，可以解决表达式闪烁的问题</li>
</ul>
</li>
<li>ng-click</li>
<li>ng-repeat</li>
</ul>
<p>使用总结</p>
<ul>
<li>AngularJS 最大程度上减少了页面上的 DOM 操作</li>
<li>让开发人员更专注于业务操作</li>
<li>通过简洁的指令结合页面结构与逻辑数据</li>
<li>通过自定义指令实现组件化编程</li>
<li>代码结构更合理</li>
<li>维护成本更低</li>
<li>AngularJS 解放了传统 JavaScript 中频繁的 DOM 操作</li>
</ul>
<p>模块</p>
<p>创建模块：</p>
<pre><code>angular.module(&apos;模块名称&apos;, [])
</code></pre><p>启动模块：</p>
<pre><code>// 指令方式启动
ng-app=&quot;模块名&quot;

// 代码方式启动
angular.bootstrap(document, [&apos;模块名&apos;])
</code></pre><p>获取模块：</p>
<pre><code>angular.module(&apos;模块名&apos;)
</code></pre><p>启动多个模块（就是将多个模块组织到一起，然后作用到某个具体的DOM节点上）：</p>
<pre><code>angular.bootstrap(document, [&apos;模块名&apos;[,&apos;模块名&apos;]])
</code></pre><p>多模块启动最佳实践：</p>
<pre><code>angular.module(&apos;app1&apos;, []).controller(&apos;AController&apos;)
angular.module(&apos;app2&apos;, []).controller(&apos;BController&apos;)
angular.module(&apos;app3&apos;, []).controller(&apos;CController&apos;)

angular.module(&apos;mainApp&apos;, [&apos;app1&apos;, &apos;app2&apos;, &apos;app3&apos;])
// 最后在 HTML 中通过 ng-app 加载 mainApp 就可以使用 app1、app2、app3 中的所有控制器成员了
// 代码如下
</code></pre><p>html:</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body ng-app=&quot;mainApp&quot;&gt;
    &lt;div ng-controller=&quot;AController&quot;&gt;&lt;/div&gt;
    &lt;div ng-controller=&quot;BController&quot;&gt;&lt;/div&gt;
    &lt;div ng-controller=&quot;CController&quot;&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>如何划分模块：</p>
<ul>
<li>控制器按照页面具体的业务功能来划分</li>
<li>模块就是将处理相关联业务的控制器组织到一起</li>
<li>这样无论是从代码结构组织上还是可维护性上都是一种比较好的实践方式</li>
</ul>
<p>控制器</p>
<p>第一种方式(在新版本中已被废弃)：</p>
<pre><code>function DemoController ($scope) {
  // some code here
}
</code></pre><p>第二种方式(代码混淆压缩之后有问题)：</p>
<pre><code>angular.module(&apos;app&apos;, [])
  .controller(&apos;DemoController&apos;, function () {
    // some code here
  })
</code></pre><p>第三方方式（推荐的方式）：</p>
<pre><code>angular.module(&apos;app&apos;, [])
  .controller(&apos;DemoController&apos;, [&apos;$scope&apos;, function () {
    // some code here
  }])
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AngularJS 表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AngularJS 表达式写在双大括号内：&lt;/li&gt;
&lt;li&gt;AngularJS 表达式把数据绑定到 HTML，与 ng-bind 指令基本一致&lt;/li&gt;
&lt;li&gt;AngularJS 将在表达式书写的位置”输出”数据&lt;u
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular-路由-详解</title>
    <link href="http://yoursite.com/2015/04/04/angular%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2015/04/04/angular详解/</id>
    <published>2015-04-04T02:26:07.000Z</published>
    <updated>2017-03-24T12:16:59.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ngRoute"><a href="#ngRoute" class="headerlink" title="ngRoute"></a>ngRoute</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>一：安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save angular-route</div></pre></td></tr></table></figure>
<p>二：引包</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>三：加载依赖</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>])</div></pre></td></tr></table></figure>
<p>四：配置路由</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>])</div><div class="line">  .config([<span class="string">'$routeProvider'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider</div><div class="line">     .when(<span class="string">'/Book/:bookId'</span>, &#123;</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'book.html'</span>,</div><div class="line">        <span class="attr">controller</span>: <span class="string">'BookController'</span>,</div><div class="line">      &#125;)</div><div class="line">      .when(<span class="string">'/Book/:bookId/ch/:chapterId'</span>, &#123;</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'chapter.html'</span>,</div><div class="line">        <span class="attr">controller</span>: <span class="string">'ChapterController'</span></div><div class="line">      &#125;);</div><div class="line">  &#125;])</div></pre></td></tr></table></figure>
<p>五：在 HTML 中留坑</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ng-view 指令就是用来配合路由使用的，路由会将匹配到的路由指定的 HTML 模板渲染到通过 ng-view 留坑的位置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="与路由相关的一些配套-API"><a href="#与路由相关的一些配套-API" class="headerlink" title="与路由相关的一些配套 API"></a>与路由相关的一些配套 API</h3><ul>
<li>ngView<ul>
<li>留坑，标记被路由替换处理的位置</li>
</ul>
</li>
<li>$routeProvider<ul>
<li>作用：配置路由表</li>
<li>根据不同的请求路径执行对应的控制器及渲染对应的HTML视图模板</li>
<li>when(path: String, route: Object)<ul>
<li>route<ul>
<li>controller</li>
<li>template</li>
<li>templateUrl</li>
<li>redirectTo</li>
</ul>
</li>
</ul>
</li>
<li>otherwise(params: Object | String)</li>
</ul>
</li>
<li>$route<ul>
<li>$route.reload() 重载当前路由</li>
<li>$route.updateParams(Object) 更新路由中的动态路径参数</li>
</ul>
</li>
<li>$routeParams<ul>
<li>用来获取路由参数</li>
<li>例如：/user/:id 是一个动态路径，则可以在控制器中通过 $routeParams 获取 :id 的值</li>
<li>也可以获取查询字符串中的参数，例如请求路径是 /user?id=1 则通过 $routeParams 也可以获取到</li>
</ul>
</li>
</ul>
<p>### </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ngRoute&quot;&gt;&lt;a href=&quot;#ngRoute&quot; class=&quot;headerlink&quot; title=&quot;ngRoute&quot;&gt;&lt;/a&gt;ngRoute&lt;/h2&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular 初体验</title>
    <link href="http://yoursite.com/2015/03/15/angular-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2015/03/15/angular-初体验/</id>
    <published>2015-03-15T12:16:00.000Z</published>
    <updated>2017-03-24T12:18:27.572Z</updated>
    
    <content type="html"><![CDATA[<p>AngularJS 简介</p>
<p>以下简称：ng</p>
<p>知识储备</p>
<ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
</ul>
<p>为了更好的学习效果，最好擅长一些 JavaScript 库，如果有后台开发经验效果最佳。</p>
<p>哪些人在用</p>
<ul>
<li>前端开发人员</li>
<li>后端开发人员目前更多</li>
</ul>
<p>什么是 AngularJS</p>
<ul>
<li>一款非常优秀的前端高级 JavaScript 框架</li>
<li>2009 年起先由 Miško Hevery 和 Adam Abron 开发</li>
<li>后被 Google 收购，用于其多款产品</li>
<li>有一个全职的开发团队继续开发和维护这个库</li>
<li>可以轻松构建 SPA 应用程序</li>
<li>通过 指令 扩展了 HTML，通过 表达式 绑定数据到 HTML<ul>
<li>angular 就是一个高级的模板引擎</li>
</ul>
</li>
<li>最大程度上解放了 DOM 操作</li>
<li>构建更加动感的 HTML 应用程序</li>
</ul>
<p>AngularJS是为了克服HTML在构建应用上的不足而设计的。</p>
<p>AngularJS有着诸多特性，最为核心的是：</p>
<ul>
<li>MVC</li>
<li>模块化</li>
<li>自动化双向数据绑定</li>
<li>语义化标签、依赖注入等等</li>
</ul>
<p>为什么使用 Angular(演示 Demo 中的 compare)</p>
<p>以前我们是这样的：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;传统页面操作数据操作方式&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;input id=&quot;txt_value&quot; type=&quot;number&quot;&gt;
  &lt;input id=&quot;btn_add&quot; type=&quot;button&quot; value=&quot;增加&quot;&gt;
  &lt;script&gt;
    (function(window, document) {
      var txt = document.querySelector(&apos;#txt_value&apos;);
      var btn = document.querySelector(&apos;#btn_add&apos;);
      btn.addEventListener(&apos;click&apos;, function(e) {
        var now = txt.value - 0;
        now = now + 1;
        txt.value = now;
      });
    })(window, document);
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>以后将会是这样的：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;使用AngularJS实现自增功能&lt;/title&gt;
&lt;/head&gt;
&lt;body ng-app&gt;
  &lt;input type=&quot;number&quot; ng-model=&quot;value&quot;&gt;
  &lt;input type=&quot;button&quot; ng-click=&quot;value=value+1&quot; value=&quot;增加&quot;&gt;
  &lt;script src=&quot;../bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><ul>
<li>更少的代码，实现更强劲的功能，当然不仅仅是这些，这些只是皮毛</li>
<li>背后带来的价值才是巨大的</li>
<li>带领前端进入了 MV* 的时代</li>
<li>又是一场革命，Angular 引领了前端工业革命<ul>
<li>从 Angular 2009 年之后，前端市场越来越火爆了</li>
</ul>
</li>
</ul>
<p>AngularJS 优缺点</p>
<p>优点：</p>
<ol>
<li>AngularJS模板功能强大丰富，自带了极其丰富的angular指令。</li>
<li>AngularJS是完全可扩展的，与其他库的兼容效果很好，每一个功能可以修改或更换，以满足开发者独特的开发流程和功能的需求。</li>
<li>AngularJS是一个比较完善的前端MVC框架，包含服务，模板，数据双向绑定，模块化，路由，过滤器，依赖注入等所有功能；</li>
<li>AngularJS是互联网巨人谷歌开发，这也意味着他有一个坚实的基础和社区支持。</li>
</ol>
<p>缺点：</p>
<ol>
<li>AngularJS强约束导致学习成本较高，对前端不友好。但遵守 AngularJS 的约定时，生产力会很高，对 后台服务器开发程序员友好。</li>
<li>AngularJS不利于SEO，因为所有内容都是动态获取并渲染生成的，搜索引擎没法爬取。</li>
<li>AngularJS作为 MVVM 框架，因为实现了数据的双向绑定，对于大数组、复杂对象会存在性能问题。</li>
</ol>
<p>AngularJS 使用场景</p>
<ul>
<li>单页面应用程序</li>
<li>复杂的后台管理系统<ul>
<li>CRUD（增加 Create、查询 Retrieve、更新 Update、删除 Delete）</li>
<li>繁杂的 DOM 操作处理的页面</li>
</ul>
</li>
</ul>
<p>Angular 是一个类 MVC 类结构的 JavaScript 框架，建议构建 CRUD 类型应用的时候使用它，</p>
<p>而对于那些图形编辑、游戏开发等应用，使用 Angular 就不如调用其它 JavaScript 类库方便，</p>
<p>如 jQuery。</p>
<p>学习资源推荐</p>
<ul>
<li>菜鸟教程：<a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="external">http://www.runoob.com/angularjs/angularjs-tutorial.html</a></li>
<li>AngularJS 中文社区：<a href="http://angularjs.cn/" target="_blank" rel="external">http://angularjs.cn/</a></li>
<li>官方文档：<a href="https://docs.angularjs.org/api" target="_blank" rel="external">https://docs.angularjs.org/api</a></li>
<li>AngularJS 权威教程<ul>
<li>API 解释的更详细</li>
</ul>
</li>
<li>AngularJS 深度剖析与最佳实践<ul>
<li>更注重实践</li>
</ul>
</li>
<li>AngularJS入门教程</li>
<li>七步从Angular.JS菜鸟到专家</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AngularJS 简介&lt;/p&gt;
&lt;p&gt;以下简称：ng&lt;/p&gt;
&lt;p&gt;知识储备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了更好的学习效果，最好擅长一些 JavaScript 库，如果
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>字符串的方法</title>
    <link href="http://yoursite.com/2015/03/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2015/03/13/字符串的方法/</id>
    <published>2015-03-13T11:34:19.000Z</published>
    <updated>2017-03-13T11:45:39.935Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>.charAt(索引);//返回的是该索引对应的字符串;</p>
</li>
<li><p>.charCodeAt(索引);//返回的是是这个索引对应的字符串的ASCII码值;</p>
</li>
<li><p>.concat(字符串1,字符串2…);返回的是拼接后的字符串;</p>
</li>
<li><p>.slice(开始的索引,结束的索引);</p>
</li>
<li><p>.slice(3,8);返回的是从索引为3的位置开始截取的字符串到索引为8的前一个结束(到7，包括7)</p>
</li>
<li><p>.substring(只写一个参数);从这个索引位置开始截取,一直到最后,获取新的字符串;</p>
</li>
<li><p>.substring(索引1,索引2);从索引1开始截取到索引2的前一个;</p>
</li>
<li><p>.substr(索引);返回的是从索引位置开始截取，一直到最后;</p>
</li>
<li><p>.substr(索引,长度);返回的是从索引位置开始截取，截取一定长度,得到新的字符串;</p>
</li>
<li><p>.indexOf(“要查找的字符串”);如果找到了则返回字符串的索引,否则返回-1;</p>
</li>
<li><p>.lastIndexOf(要找的字符串);从字符串的后面向前找,但是索引仍然是从左开始,从0开始,找到则返回对应的索引,找不到则返回-1;</p>
</li>
<li><p>.trim();清除字符串两边的空格;</p>
</li>
<li><p>.toLocaleLowerCase()把字符串转小写;</p>
</li>
<li><p>.toLocaleUpperCase()把字符串转大写;</p>
</li>
<li><p>.replace(“要替换的字符串”,”替换的字符串”);返回新的字符串;</p>
</li>
<li><p>.split(“要干掉的字符串内容”);返回的是字符串组合成的数组;</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;.charAt(索引);//返回的是该索引对应的字符串;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.charCodeAt(索引);//返回的是是这个索引对应的字符串的ASCII码值;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.concat(字符串1,字符串2…);返回
    
    </summary>
    
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2015/01/04/hello-world/"/>
    <id>http://yoursite.com/2015/01/04/hello-world/</id>
    <published>2015-01-04T02:26:07.000Z</published>
    <updated>2017-03-24T12:11:33.949Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
</feed>
